// GPT Í∏Ä ÏÉùÏÑ±Í∏∞ - Îã§Íµ≠Ïñ¥ + UI Ìï≠Î™© Î≤àÏó≠ Ìè¨Ìï®

import { useState, useEffect } from 'react';
import Head from 'next/head';
import '../styles/globals.css';

export default function Home() {
  const [type, setType] = useState('email');
  const [tone, setTone] = useState('formal');
  const [keywords, setKeywords] = useState('');
  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [lang, setLang] = useState<'en' | 'ko' | 'ja'>('en');

  useEffect(() => {
    document.body.className = darkMode ? 'dark' : '';
  }, [darkMode]);

  const texts = {
    en: {
      title: 'AutoWriter Pro',
      template: 'Template Type:',
      tone: 'Writing Tone:',
      keywords: 'Keywords (comma-separated):',
      generate: 'Generate',
      copying: 'Copied!',
      result: 'Generated Result:',
      languages: 'üåê Language: English',
      darkmode: 'üåô Dark Mode',
      lightmode: '‚òÄÔ∏è Light Mode',
      types: {
        email: 'Email',
        cover: 'Cover Letter',
        marketing: 'Marketing Copy',
        blog: 'Blog Intro'
      },
      tones: {
        formal: 'Formal',
        casual: 'Casual',
        professional: 'Professional',
        simple: 'Simple'
      }
    },
    ko: {
      title: 'Ïò§ÌÜ†ÎùºÏù¥ÌÑ∞ ÌîÑÎ°ú',
      template: 'Í∏Ä ÌÖúÌîåÎ¶ø Ï¢ÖÎ•ò:',
      tone: 'ÎßêÌà¨ ÏÑ§Ï†ï:',
      keywords: 'ÌÇ§ÏõåÎìú (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ):',
      generate: 'ÏÉùÏÑ±ÌïòÍ∏∞',
      copying: 'Î≥µÏÇ¨ ÏôÑÎ£å!',
      result: 'ÏÉùÏÑ±Îêú Í∏Ä:',
      languages: 'üåê Ïñ∏Ïñ¥: ÌïúÍµ≠Ïñ¥',
      darkmode: 'üåô Îã§ÌÅ¨ Î™®Îìú',
      lightmode: '‚òÄÔ∏è ÎùºÏù¥Ìä∏ Î™®Îìú',
      types: {
        email: 'Ïù¥Î©îÏùº',
        cover: 'ÏûêÍ∏∞ÏÜåÍ∞úÏÑú',
        marketing: 'ÎßàÏºÄÌåÖ Î¨∏Íµ¨',
        blog: 'Î∏îÎ°úÍ∑∏ ÎèÑÏûÖÎ∂Ä'
      },
      tones: {
        formal: 'Í≥µÏÜêÌïòÍ≤å',
        casual: 'Ìé∏ÌïòÍ≤å',
        professional: 'Ï†ÑÎ¨∏Ï†ÅÏúºÎ°ú',
        simple: 'Í∞ÑÎã®ÌïòÍ≤å'
      }
    },
    ja: {
      title: '„Ç™„Éº„Éà„É©„Ç§„Çø„Éº„Éó„É≠',
      template: '„ÉÜ„É≥„Éó„É¨„Éº„Éà„ÅÆÁ®ÆÈ°û:',
      tone: 'Êñá‰Ωì:',
      keywords: '„Ç≠„Éº„ÉØ„Éº„ÉâÔºà„Ç´„É≥„ÉûÂå∫Âàá„ÇäÔºâ:',
      generate: 'ÁîüÊàê„Åô„Çã',
      copying: '„Ç≥„Éî„Éº„Åó„Åæ„Åó„ÅüÔºÅ',
      result: 'ÁîüÊàê„Åï„Çå„ÅüÊñáÁ´†:',
      languages: 'üåê Ë®ÄË™û: Êó•Êú¨Ë™û',
      darkmode: 'üåô „ÉÄ„Éº„ÇØ„É¢„Éº„Éâ',
      lightmode: '‚òÄÔ∏è „É©„Ç§„Éà„É¢„Éº„Éâ',
      types: {
        email: '„É°„Éº„É´',
        cover: 'ÂøóÊúõÂãïÊ©üÊõ∏',
        marketing: '„Éû„Éº„Ç±„ÉÜ„Ç£„É≥„Ç∞Êñá',
        blog: '„Éñ„É≠„Ç∞Á¥π‰ªãÊñá'
      },
      tones: {
        formal: '‰∏ÅÂØß„Å´',
        casual: '„Ç´„Ç∏„É•„Ç¢„É´„Å´',
        professional: 'Â∞ÇÈñÄÁöÑ„Å´',
        simple: '„Ç∑„É≥„Éó„É´„Å´'
      }
    }
  };

  const handleGenerate = async () => {
    setLoading(true);
    // lang, tone, type ÌÉÄÏûÖÏùÑ Î™ÖÏãúÌï¥Ï§òÏïº Ìï®
const toneKey = tone as keyof typeof texts['en']['tones'];
const typeKey = type as keyof typeof texts['en']['types'];
const langKey = lang as keyof typeof texts;

const toneText = texts[langKey].tones[toneKey];
const typeText = texts[langKey].types[typeKey];


const prompt = {
  en: `Write a ${tone} ${type} using the following keywords: ${keywords}. Limit to 300 characters.`,
  ko: `Îã§Ïùå ÌÇ§ÏõåÎìúÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ${toneText} ${typeText} Í∏ÄÏùÑ ÏûëÏÑ±Ìï¥Ï§ò: ${keywords}. 300Ïûê Ïù¥ÎÇ¥Î°ú ÏûëÏÑ±Ìï¥Ï§ò.`,
  ja: `${keywords}„Çí‰Ωø„Å£„Å¶${typeText}„Çí${toneText}Êõ∏„ÅÑ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ300ÊñáÂ≠ó‰ª•ÂÜÖ„Åß„ÄÇ`
}[lang];


    const res = await fetch('/api/generate', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ type, tone, keywords, prompt })
    });
    const data = await res.json();
    setResult(data.text);
    setLoading(false);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text).then(() => {
      alert(texts[lang].copying);
    });
  };

  const nextLang = (l: 'en' | 'ko' | 'ja') => (l === 'en' ? 'ko' : l === 'ko' ? 'ja' : 'en');

  return (
    <div className="container">
      <Head>
        <title>{texts[lang].title}</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <main>
        <div className="header">
          <div className="title">{texts[lang].title} ‚úçÔ∏è</div>
          <div className="controls">
            <button onClick={() => setLang(nextLang(lang))} className="toggle">
              {texts[lang].languages}
            </button>
            <button onClick={() => setDarkMode(!darkMode)} className="toggle">
              {darkMode ? texts[lang].lightmode : texts[lang].darkmode}
            </button>
          </div>
        </div>

        <label>{texts[lang].template}</label>
        <select value={type} onChange={(e) => setType(e.target.value)}>
          <option value="email">{texts[lang].types.email}</option>
          <option value="cover">{texts[lang].types.cover}</option>
          <option value="marketing">{texts[lang].types.marketing}</option>
          <option value="blog">{texts[lang].types.blog}</option>
        </select>

        <label>{texts[lang].tone}</label>
        <select value={tone} onChange={(e) => setTone(e.target.value)}>
          <option value="formal">{texts[lang].tones.formal}</option>
          <option value="casual">{texts[lang].tones.casual}</option>
          <option value="professional">{texts[lang].tones.professional}</option>
          <option value="simple">{texts[lang].tones.simple}</option>
        </select>

        <label>{texts[lang].keywords}</label>
        <input
          type="text"
          value={keywords}
          onChange={(e) => setKeywords(e.target.value)}
          className="input"
        />

        <button onClick={handleGenerate} disabled={loading} className="button">
          {loading ? '...' : texts[lang].generate}
        </button>

        {result && (
          <div className="result-box">
            <h3>{texts[lang].result}</h3>
            <textarea value={result} readOnly className="textarea" />
            <button onClick={() => copyToClipboard(result)} className="button">üìã Copy</button>
          </div>
        )}
      </main>
    </div>
  );
}
